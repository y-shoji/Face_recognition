
doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width')
    title= title
    link(rel='stylesheet', href='/stylesheets/style.css')
  body
    h2 OpenCV.js and Tensorflow.js demo
    p#status1 OpenCV.js is loading...
    p#status2 Tensorflow.js is loading...
    div#canvas1
      video#video_area(style='background-color: #000', autoplay='')
      br
      button#start_btn 映像取得
    div#canvas2
      canvas#canvasOutput     
      .caption 出力画像
    div#pre_button
      br
      button(onclick='copyFrame();')フレーム取得
      button(onClick="tf_predict();")予測開始

    script(src="/javascripts/processing_cv4.js",type='text/javascript')
    script(async='', src='https://docs.opencv.org/3.4.6/opencv.js', onload='onOpenCvReady();', type='text/javascript')

    script(src="/javascripts/tensorjs.js",type='text/javascript')
    script(src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.0.0",onload='OnTensorflowReady();',type='text/javascript')

    script(type='text/javascript').
      // getUserMedia が使えないときは、『getUserMedia()が利用できないブラウザです！』と言ってね。
      if (typeof navigator.mediaDevices.getUserMedia !== 'function') {
      const err = new Error('getUserMedia()が利用できないブラウザです！');
      alert(`${err.name} ${err.message}`);
      throw err;
      }
      // 操作する画面エレメント変数定義します。
      const $start = document.getElementById('start_btn');   // スタートボタン
      const $video = document.getElementById('video_area');  // 映像表示エリア
      // 「スタートボタン」を押下したら、getUserMedia を使って映像を「映像表示エリア」に表示してね。
      $start.addEventListener('click', () => {
      navigator.mediaDevices.getUserMedia({ video: {width:320,height:320}, audio: false })
      .then(stream => $video.srcObject = stream)
      .catch(err => alert(`${err.name} ${err.message}`));
      }, false);
      // 「静止画取得」ボタンが押されたら「<canvas id="capture_image">」に映像のコマ画像を表示します。
      function copyFrame() {
      var canvas_capture_image = document.getElementById('canvasOutput');
      var cci = canvas_capture_image.getContext('2d');
      var va = document.getElementById('video_area');
      canvas_capture_image.width  = va.videoWidth;
      canvas_capture_image.height = va.videoHeight;
      cci.drawImage(va, 0, 0);
      cv_img(canvasOutput);

      
      // canvasに『「静止画取得」ボタン』押下時点の画像を描画。
      }

    p#result1
    p#result2